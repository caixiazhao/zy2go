自由之战2 AI模型初步构想

主要思路：将行为树与神经网络结合，利用pythonnet实现python于c#的协同。

当前构想：总体上利用行为树来控制角色的行动，同时利用python搭建基于keras的神经网络模型，并将模型嵌入行为树的分支来调用模型。行为树可以负责控制角色进行常规简单的操作，在这一点上已有的行为树技术有能力提供超过普通玩家的精准操作。神经网络可以用来解决一些情况复杂的或者难以抽象的问题，例如提供高层次的策略和战术；提供复杂战斗场景下的具体操作，比如走位和施法；可能还能提供一些特殊的小技巧（dota中的卡兵线）。

总体设计的行为树大致如下：

![avatar]（https://github.com/sky4star/zy2go/blob/master/image/tree1.PNG?raw=true）

在行为树中策略子树和行为子树是并行进行的，在行动的同时策略子树也会实时的修改策略从而达到利用有限的简单策略实现复杂的战术行为的目的。而如何变换策略作出决定则需要通过训练和学习让神经网络模型自己找到内在的联系和规律。
初步设计的AI模型包含两到三个神经网络，其中最重要的部分是为模型提供高层次策略的神经网络。
>当前的设计中，我们设定了战斗，撤退，对线，打野，gank，守卫，支援和埋伏几种策略，对于每一种策略我们会在行为树中设计对应的子树来负责相关的行为。这几种策略的大致意义和目标如下：
>>战斗：进入具体的战斗模式，并为角色提供一个攻击目标并交由对应子树来控制具体动作。由于单挑，团战本质上一次都只能以一个敌人/方向作为攻击的目标，所以模型一次只会决定一个攻击目标。由于策略子树可能快速的切换策略所以即便每次只能指定一个目标，AI也有可能在复杂的团战中实时确定当前最佳的攻击目标并做出动作。具体的动作子树可以用一个战斗用神经网络来决定具体的施法走位。
>>
>>撤退：进入撤退模式并提供一个移动方向，该策略并不一定是要完全撤退到会恢复点，可能只是在团战中暂时的后退避免被集火或者抗塔然后快速的切换回战斗模式继续输出。但在低血量情况下撤退策略也可能会持续工作使得角色彻底撤退到安全区域并进行恢复。对应的行动子树只需要进行位移操作所以可以由行为树来控制，可以包含利用闪现，回城来逃离（可能还可以使用传送，但是如何插旗还没设计，也可能可以使用位移技能逃离或者控制技能阻碍敌人，但是情况太复杂，需要考虑所有可用于逃离的技能，现在暂不考虑）
>>
>>对线：进入线上模式并指定兵线（上中下路）或目标塔。以补兵和拆塔为目标，可以用行为树来控制向目标兵线移动的过程以及补兵推塔的过程。可能会在补兵的过程中实时切换为战斗模式攻击对线的敌方英雄，也可能在补兵拆塔的过程中实时切换为撤退来防止对面gank。在移动过程程中可能可以使用传送（插旗机制暂未考虑），位移技能（暂未考虑）
>>
>>打野：进入打野模式，并指定目标野怪。可以由行为树来控制想野怪移动和打野的过程（攻击施法情况较简单，基本不用考虑走位），同事可以随时切换成撤退和战斗模式来应对突然出现的敌人或潜在的危险。
>>
>>gank：进入gank模式并指定gank目标，可由行为树来控制向目标移动的过程并在接近目标后切换为埋伏或战斗模式然后进行战斗。在向目标移动过程中若出现不再适合gank的情况可有策略模块切换回打野对线等模式，放弃gank继续发育。
>>
>>守卫：指定守护的目标建筑并进入守卫模式。可由行为树控制向守护目标移动，到塔后可能切换至对线/战斗等模式来应对敌方兵线或英雄。
>>
>>支援：指定支援目标角色并进入支援模式，主要适用于辅助英雄。由可由行为树来确认为队友加血，施加buff，去除debuff的行为，需考虑全部英雄技能。
>>
>>埋伏：指定埋伏地点并进入埋伏模式，可由行为树来控制等待敌人靠近再切换为战斗模式对敌方角色进行攻击。
>>
>当前非战斗状态下未考虑插旗，放草丛，释放技能等问题，部分行为树需要提前了解英雄技能（特别是支援行为）。所有的过程中均可能放弃当前策略切换成不同策略来应对当前状况变化（例如守卫移动中变为战斗/撤退来应对突然出现的敌人）。当前策略与行为并行的设计最重要前提是确保策略计算的速度足够快，能随时响应局势的变换来更新策略。该网络所需要的输入输出情况如下：
>>输入：
>>
>>
>>
>
第二个神经网络是用于控制具体走位施法的战斗用神经网络